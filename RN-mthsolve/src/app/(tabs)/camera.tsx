import * as ImagePicker from "expo-image-picker";
import * as MediaLibrary from "expo-media-library";
import React, { useEffect, useState } from "react";
import {
  Alert,
  Button,
  Image,
  ScrollView,
  StyleSheet,
  Text,
  View
} from "react-native";

export default function CameraScreen() {
  const [croppedImage, setCroppedImage] = useState<string | null>(null);

  useEffect(() => {
    const initializeCamera = async () => {
      // Y√™u c·∫ßu c√°c quy·ªÅn c·∫ßn thi·∫øt
      await ImagePicker.requestCameraPermissionsAsync();
      await MediaLibrary.requestPermissionsAsync();
    };
    initializeCamera();
  }, []);

  // H√†m m·ªü camera v√† cho ph√©p ch·ªânh s·ª≠a (c·∫Øt ·∫£nh)
  const openCameraWithEditor = async () => {
    try {
      const result = await ImagePicker.launchCameraAsync({
        allowsEditing: true,
        quality: 1,
      });

      if (!result.canceled) {
        setCroppedImage(result.assets[0].uri);
        await MediaLibrary.saveToLibraryAsync(result.assets[0].uri);
        Alert.alert('Th√†nh c√¥ng', 'ƒê√£ ch·ª•p v√† c·∫Øt ·∫£nh!');
      }
    } catch (error) {
      console.error('L·ªói Camera:', error);
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ m·ªü camera');
    }
  };

  // [MODIFIED] H√†m ƒë·ªÉ ch·ª•p l·∫°i ·∫£nh, gi·ªù s·∫Ω m·ªü th·∫≥ng camera
  const retakePhoto = () => {
    openCameraWithEditor();
  };

  // H√†m t·∫£i ·∫£nh l√™n server (hi·ªán t·∫°i l√† gi·∫£ l·∫≠p)
  const uploadImage = async () => {
    if (!croppedImage) {
      Alert.alert('L·ªói', 'Ch∆∞a c√≥ ·∫£nh ƒë·ªÉ g·ª≠i');
      return;
    }

    try {
      const formData = new FormData();
      formData.append('image', {
        uri: croppedImage,
        type: 'image/jpeg',
        name: 'math_problem.jpg',
      } as any);

      // Gi·∫£ l·∫≠p vi·ªác g·ª≠i th√†nh c√¥ng ƒë·ªÉ demo
      console.log('S·∫µn s√†ng ƒë·ªÉ t·∫£i l√™n:', croppedImage);
      Alert.alert('Demo', 'S·∫µn s√†ng g·ª≠i l√™n backend!');

    } catch (error) {
      console.error('L·ªói t·∫£i l√™n:', error);
      Alert.alert('L·ªói', 'C√≥ l·ªói x·∫£y ra khi g·ª≠i ·∫£nh');
    }
  };

  // --- C√°c h√†m render giao di·ªán ---

  // Giao di·ªán n√†y gi·ªù l√† ph∆∞∆°ng √°n d·ª± ph√≤ng n·∫øu ng∆∞·ªùi d√πng h·ªßy camera l·∫ßn ƒë·∫ßu
  const renderCameraSection = () => (
    <View style={styles.cameraSection}>
      <View style={styles.cameraButtonContainer}>
        <Button
          title="üì∏ M·ªü l·∫°i Camera"
          onPress={openCameraWithEditor}
          color="#3498db"
        />
      </View>
    </View>
  );

  // Render giao di·ªán sau khi ƒë√£ c√≥ ·∫£nh ƒë√£ c·∫Øt
  const renderResultSection = () => (
    <View style={styles.resultSection}>
      <Text style={styles.sectionTitle}>‚úÖ ·∫¢nh b√†i to√°n ƒë√£ ch·ªçn:</Text>
      {croppedImage && (
        <Image
          source={{ uri: croppedImage }}
          style={styles.preview}
          resizeMode="contain"
        />
      )}

      <View style={styles.actionButtons}>
        <Button
          title="üì§ G·ª≠i l√™n server ƒë·ªÉ gi·∫£i"
          onPress={uploadImage}
          color="#27ae60"
        />
        <Button
          title="üì∏ Ch·ª•p l·∫°i"
          onPress={retakePhoto}
          color="#e74c3c"
        />
      </View>
    </View>
  );

  // Render ph·∫ßn footer h∆∞·ªõng d·∫´n
  const renderFooter = () => (
    <View style={styles.footer}>
      <Text style={styles.footerText}>
        M·∫πo: H√£y ƒë·∫£m b·∫£o ·∫£nh ch·ª•p r√µ n√©t v√† ƒë·ªß s√°ng
      </Text>
    </View>
  );

  // Render ch√≠nh c·ªßa component
  return (
    <ScrollView style={styles.container} contentContainerStyle={styles.contentContainer}>
      <Text style={styles.title}>üì± Gi·∫£i To√°n AI</Text>
      <Text style={styles.subtitle}>Ch·ª•p ·∫£nh b√†i to√°n ƒë·ªÉ nh·∫≠n l·ªùi gi·∫£i</Text>

      {!croppedImage ? renderCameraSection() : renderResultSection()}

      {renderFooter()}
    </ScrollView>
  );
}

// --- StyleSheet ---
const styles = StyleSheet.create({
  // Ki·ªÉu cho container
  container: {
    flex: 1,
    backgroundColor: "#f8f9fa",
  },
  contentContainer: {
    padding: 20,
    minHeight: '100%',
    justifyContent: 'center',
  },

  // Ki·ªÉu cho ti√™u ƒë·ªÅ
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 5,
    color: '#2c3e50',
  },
  subtitle: {
    fontSize: 16,
    textAlign: 'center',
    marginBottom: 30,
    color: '#7f8c8d',
    fontStyle: 'italic',
  },

  // Ki·ªÉu cho khu v·ª±c camera
  cameraSection: {
    alignItems: 'center',
    justifyContent: 'center',
    flex: 1,
  },
  cameraButtonContainer: {
    width: '80%',
  },

  // Ki·ªÉu cho khu v·ª±c k·∫øt qu·∫£
  resultSection: {
    alignItems: 'center',
    flex: 1,
    justifyContent: 'center',
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 15,
    color: '#27ae60',
    textAlign: 'center',
  },
  preview: {
    width: 300,
    height: 250,
    borderRadius: 15,
    borderWidth: 3,
    borderColor: '#27ae60',
    marginBottom: 20,
    backgroundColor: '#fff',
  },
  actionButtons: {
    width: '100%',
    gap: 15,
  },

  // Ki·ªÉu cho footer
  footer: {
    marginTop: 30,
    padding: 15,
    backgroundColor: '#fff3cd',
    borderRadius: 10,
    borderWidth: 1,
    borderColor: '#ffeaa7',
  },
  footerText: {
    fontSize: 12,
    color: '#856404',
    textAlign: 'center',
    fontStyle: 'italic',
  },
});
